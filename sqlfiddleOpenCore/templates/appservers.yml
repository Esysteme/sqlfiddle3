apiVersion: extensions/v1beta1
kind: ReplicaSet
metadata:
  namespace: sqlfiddle
  name: appservers
spec:
  replicas: {{ .Values.appServerReplicas }}
  template:
    metadata:
      labels:
        role: appserver
    spec:
    {{ if .Values.appDatabaseIP }}{{else}}
      initContainers:
      - name: wait-for-repo
        image: "groundnuty/k8s-wait-for:0.3"
        imagePullPolicy: IfNotPresent
        args: [ "pod", "-l", "role=appdatabase" ]
    {{ end }}
      volumes:
      - name: healthcheck
        emptyDir:
          medium: Memory
      containers:
        - image: {{ .Values.registryPrefix }}/{{ .Values.appServerImage }}:{{ .Values.appServerVersion }}
          volumeMounts:
            - mountPath: /healthcheck
              name: healthcheck
          imagePullPolicy: IfNotPresent
          name: appserver
          ports:
            - containerPort: 8081
              name: http
              protocol: TCP
          resources:
              requests:
                memory: {{ .Values.appServerMemory | quote }}
          env:
            - name: VERTX_OPTS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Xmx960m -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005 -Dvertx.disableFileCaching=true -Dvertx.disableFileCPResolving=true"
          readinessProbe:
            httpGet:
              path: /backend/dbTypes
              port: 8081
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 20
          livenessProbe:
            exec:
              command:
              - cat
              - /healthcheck/healthy
            initialDelaySeconds: 5
            periodSeconds: 5
        - image: sqlfiddle/varnish:{{ .Values.varnishVersion }}
          volumeMounts:
            - mountPath: /healthcheck
              name: healthcheck
          imagePullPolicy: IfNotPresent
          name: varnish
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
          - name: VARNISH_BACKEND_HOST
            value: "localhost"
          - name: VARNISH_BACKEND_PORT
            value: "8081"
          resources:
              requests:
                memory: "128Mi"
          livenessProbe:
            exec:
              command:
              - cat
              - /healthcheck/healthy
            initialDelaySeconds: 5
            periodSeconds: 5
        # thanks to https://stackoverflow.com/a/41965920/808921
        - name: liveness
          args:
          - /bin/sh
          - -c
          - touch /healthcheck/healthy; sleep $(( RANDOM % (3600) + 1800 )); rm -rf /healthcheck/healthy; sleep 600
          image: gcr.io/google_containers/busybox
          volumeMounts:
            - mountPath: /healthcheck
              name: healthcheck
          livenessProbe:
            exec:
              command:
              - cat
              - /healthcheck/healthy
            initialDelaySeconds: 5
            periodSeconds: 5
---
kind: Service
apiVersion: v1
metadata:
  namespace: sqlfiddle
  name: appserver-service
spec:
{{ if .Values.isLocal }}{{ else }}
  type: LoadBalancer
{{ end }}
  ports:
    - port: 80
      name: http
      targetPort: 8080
  selector:
    role: appserver
{{ if .Values.isLocal }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: sqlfiddle
  name: ingress
spec:
  backend:
    serviceName: appserver-service
    servicePort: 80
{{ end }}
